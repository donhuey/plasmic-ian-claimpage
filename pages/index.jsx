// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/host";
import { PlasmicClaimPage } from "../components/plasmic/im_xbeanies/PlasmicClaimPage";
import { useRouter } from "next/router";
import Link from 'next/link'
import { getNfts } from '@/lib/prisma/Nfts'

function ClaimPage(props) {
  // Use PlasmicClaimPage to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicClaimPage are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicClaimPage is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).
  return (
    <ph.PageParamsProvider
      params={useRouter()?.query}
      query={useRouter()?.query}
    >
      <section >
      <div >
        <h2 >
            Digital Collectibles
        </h2>
        <ul >
          {props.nfts?.map(nft => (
            <li key={nft.id} >
              <Link href={`claim/${nft.tagUid}`}>{nft.issuer}</Link>
            </li>
          ))}
        </ul>
      </div>
    </section>
      <PlasmicClaimPage />
    </ph.PageParamsProvider>
  );
}

export const getServerSideProps = async () => {

  async function getData() {
      const { nfts } = await getNfts()
      if (!nfts) {
        throw new Error('Failed to fetch data')
      }
    
      return nfts
    }

  const nfts = await getData()
  return {
    props: { nfts },
  }
}

export default ClaimPage;
